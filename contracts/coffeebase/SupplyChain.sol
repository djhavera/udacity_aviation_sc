pragma solidity ^0.4.24;
// Define a contract 'Supplychain'
contract SupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'pn' for Part Number (PN)
  uint  pn;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the PN to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the PN to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Mtl_Received,  // 0
    Built,  // 1
    Shipped,     // 2
    Widget_Received,    // 3
    Widget_Purchased,       // 4
    Widget_Shipped_to_Customer    // 5
    }

  State constant defaultState = State.Mtl_Received;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    pn; // Part Number (PN), generated by the owner, goes on the package, can be verified by the customer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through the stages
    address originFactoryID; // Metamask-Ethereum address of the Factory
    string  originFactoryName; // Factory Name
    string  originFactoryInformation;  // FactoryInformation
    string  originFactoryLatitude; // FactoryLatitude
    string  originFactoryLongitude;  // Factory Longitude
    uint    productID;  // Product ID potentially a combination of pn + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address factoryID;  // Metamask-Ethereum address of the factory
    address warehouseID; // Metamask-Ethereum address of the warehouse
    address customerID; // Metamask-Ethereum address of the customer
  }

  // Define events with the same state values and accept 'pn' as input argument
  event Mtl_Received(uint pn);
  event Built(uint pn);
  event Shipped(uint pn);
  event Widget_Received(uint pn);
  event Widget_Purchased(uint pn);
  event Widget_Shipped_to_Customer(uint pn);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _pn) {
    _;
    uint _price = items[_pn].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_pn].customerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a pn is Mtl_Received
  modifier mtl_received(uint _pn) {
    require(items[_pn].itemState == State.Mtl_Received);
    _;
  }

  // Define a modifier that checks if an item.state of a pn is Built
  modifier built(uint _pn) {
    require(items[_pn].itemState == State.Built);
    _;
  }
  
  // Define a modifier that checks if an item.state of a pn is Shipped
  modifier shipped(uint _pn) {
    require(items[_pn].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a pn is Widget_Received
  modifier widget_received(uint _pn) {
    require(items[_pn].itemState == State.Widget_Received);
    _;
  }

  // Define a modifier that checks if an item.state of a pn is Widget_Purchased
  modifier widget_purchased(uint _pn) {
    require(items[_pn].itemState == State.Widget_Purchased);
    _;
  }
  
  // Define a modifier that checks if an item.state of a pn is Widget_Shipped_to_Customer
  modifier widget_shipped_to_customer(uint _pn) {
    require(items[_pn].itemState == State.Widget_Shipped_to_Customer);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'pn' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    pn = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

    // Define a function 'receiveItem' that allows a factory to mark an item 'Mtl_Received'
    function receiveItem(uint _pn, address _originFactoryID, string memory _originFactoryName, string memory _originFactoryInformation, string memory  _originFactoryLatitude, string memory  _originFactoryLongitude, string memory  _productNotes) public
    verifyCaller(_originFactoryID)

    {
        // Part Numbers Uniqueness Check
        require(items[_pn].pn == 0, "Part Number already exists");

        // Add the new item
        Item memory newItem;
        newItem.sku = sku;
        newItem.pn = _pn;
        newItem.originFactoryID = msg.sender;
        newItem.ownerID = _originFactoryID;
        newItem.originFactoryName = _originFactoryName;
        newItem.originFactoryInformation = _originFactoryInformation;
        newItem.originFactoryLatitude = _originFactoryLatitude;
        newItem.originFactoryLongitude = _originFactoryLongitude;
        newItem.productID = _pn;
        newItem.productNotes = _productNotes;
        newItem.itemState = State.Mtl_Received;

        /*
        items[_pn].sku = sku;
        items[_pn].pn = _pn;
        items[_pn].originFactoryID = msg.sender;
        items[_pn].ownerID = _originFactoryID;
        items[_pn].originFactoryName = _originFactoryName;
        items[_pn].originFactoryInformation = _originFactoryInformation;
        items[_pn].originFactoryLatitude = _originFactoryLatitude;
        items[_pn].originFactoryLongitude = _originFactoryLongitude;
        items[_pn].productID = _pn;
        items[_pn].productNotes = _productNotes;
        items[_pn].itemState = State.Mtl_Received;
        */

        // Update mapping
        items[_pn] = newItem;
        // Increment sku
        sku = sku + 1;
        // Emit the appropriate event
        emit Mtl_Received(pn);
    }
    

    // Define a function 'buildWidget' that allows a Factory to mark an item 'Built'
    function buildWidget(uint _pn) public
    // Call modifier to check if sn has passed previous supply chain stage (is removed)
    mtl_received(_pn)

    // Call modifier to verify caller of this function
    verifyCaller(items[_pn].originFactoryID)

    {
        // Update the appropriate fields
        items[_pn].itemState = State.Built;

        // Emit the appropriate event
        emit Built(_pn);

    }

    // Define a function 'shipItem' that allows a Factory to mark an item 'Shipped'
    function shipItem(uint _pn) public
    // Modifier to check if pn has passed previous supply chain stage
    built(_pn)

    // Modifier to verify caller of this function
    verifyCaller(items[_pn].originFactoryID)

    {
        // Update the appropriate fields
        items[_pn].itemState = State.Shipped;

        // Emit the appropriate event
        emit Shipped(_pn);

    }

    // Define a function 'receiveItemWarehouse' that allows a Warehouse to mark an item 'Widget_Received'
    function receiveItemWarehouse(uint _pn, uint _price) public
    // Modifier to check if pn has passed previous supply chain stage
    shipped(_pn)

    // Modifier to verify caller of this function
    verifyCaller(items[_pn].originFactoryID)

    {
        // Update the appropriate fields
        items[_pn].itemState = State.Widget_Received;

        // Emit the appropriate event
        emit Widget_Received(_pn);

    }

    // Define a function 'purchaseItem' that allows a factory to mark an item 'Widget_Purchased'
    function purchaseItem(uint _pn) public payable 
    // Modifier to check if pn has passed previous supply chain stage
    widget_received(_pn)

    // Modifier to verify caller of this function
    verifyCaller(items[_pn].originFactoryID)
    paidEnough(items[_pn].productPrice) checkValue(_pn)

    {
        // Update the appropriate fields
        items[_pn].itemState = State.Widget_Purchased;
        items[_pn].ownerID = msg.sender;  

        // Transfer money to farmer
        items[_pn].originFactoryID.transfer(items[_pn].productPrice);

        // Emit the appropriate event
        emit Widget_Purchased(_pn);

    }

    // Define a function 'shipItemCustomer' that allows a factory to mark an item 'Widget_Shipped_to_Customer'
    function shipItemCustomer(uint _pn) public
    // Modifier to check if sn has passed previous supply chain stage
    widget_purchased(_pn)

    // Modifier to verify caller of this function
    verifyCaller(items[_pn].originFactoryID)

    {
        // Update the appropriate fields
        items[_pn].itemState = State.Widget_Shipped_to_Customer;

        // Emit the appropriate event
        emit Widget_Shipped_to_Customer(_pn);
    }


  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _pn) public view returns 
  (
  uint itemSKU,
  uint itemPN,
  address ownerID,
  address originFactoryID,
  string  originFactoryName,
  string  originFactoryInformation,
  string  originFactoryLatitude,
  string  originFactoryLongitude
  ) 
  {
  itemSKU = items[_pn].sku;
  itemPN = items[_pn].pn;
  ownerID = items[_pn].ownerID;
  originFactoryID = items[_pn].originFactoryID;
  originFactoryName = items[_pn].originFactoryName;
  originFactoryInformation = items[_pn].originFactoryInformation;
  originFactoryLatitude =  items[_pn].originFactoryLatitude;
  originFactoryLongitude = items[_pn].originFactoryLongitude;
  
  return 
  (
  itemSKU,
  itemPN,
  ownerID,
  originFactoryID,
  originFactoryName,
  originFactoryInformation,
  originFactoryLatitude,
  originFactoryLongitude
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _pn) public view returns 
  (
  uint    itemSKU,
  uint    itemPN,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  State    itemState,
  address factoryID,
  address warehouseID,
  address customerID
  ) 
  {
    // Assign values to the 9 parameters
  itemSKU  = items[_pn].sku;
  itemPN = items[_pn].pn;
  productID = items[_pn].productID;
  productNotes  = items[_pn].productNotes;
  productPrice = items[_pn].productPrice;
  itemState = items[_pn].itemState;
  //itemState = items[_pn].itemState;
  factoryID  = items[_pn].factoryID;
  warehouseID = items[_pn].warehouseID;
  customerID = items[_pn].customerID;
    
  return 
  (
  itemSKU,
  itemPN,
  productID,
  productNotes,
  productPrice,
  itemState,
  factoryID,
  warehouseID,
  customerID
  );
  }
}
