// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var pn = 1
    const ownerID = accounts[0]
    const originFactoryID = accounts[1]
    const originFactoryName = "John Doe"
    const originFactoryInformation = "Yarray Valley"
    const originFactoryLatitude = "-38.239770"
    const originFactoryLongitude = "144.341490"
    var productID = sku + pn
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const factoryID = accounts[2]
    const warehouseID = accounts[3]
    const customerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Worker: accounts[1] ", accounts[1])
    console.log("Factory: accounts[2] ", accounts[2])
    console.log("Warehouse: accounts[3] ", accounts[3])
    console.log("Customer: accounts[4] ", accounts[4])
    // https://ethereum.stackexchange.com/questions/50903/how-to-unit-test-struct-values
    // 1st Test
    // https://ethereum.stackexchange.com/questions/50903/how-to-unit-test-struct-values
    // https://ethereum.stackexchange.com/questions/34614/return-a-struct-from-a-mapping-in-test-truffle
    // https://javascript.info/async-await
    // await replaces .then in asycn functions
    // https://ethereum.stackexchange.com/questions/61273/how-to-debug-mappings-of-structs-in-truffle-tests
    // https://study-hall.udacity.com/rooms/community:nd1309:562321-project-559/community:thread-3970298536-556132?contextType=room
   //https://study-hall.udacity.com/rooms/community:nd1309:562321-project-559/community:thread-10546385033-482174?contextType=room
    //describe('Create a Smart Contract', () => { 
        it("Testing smart contract function receiveItem", async() => {
            const supplyChain = await SupplyChain.deployed()
        
            // Declare and Initialize a variable for event
            var eventEmitted = false
            
            // Watch the emitted event Mtl_Received()
            var event = supplyChain.Mtl_Received()
            await event.watch((err, res) => {
                eventEmitted = true
            })

             // Mark an item as received by calling function receiveItem()
            await supplyChain.receiveItem(pn, accounts[1], originFactoryName, originFactoryInformation,originFactoryLatitude, originFactoryLongitude, productNotes, {from: originFactoryID, gas: 1000000})
            //const resultBufferOne = await supplyChain.fetchItemBufferOne.call(pn)
            
            // Retrieve the just now saved item from blockchain by calling function fetchItem()
            const resultBufferOne = await supplyChain.fetchItemBufferOne.call(pn)
            //Remove Big Number
            //resultBufferOne[0] = resultBufferOne[0].toNumber()
            //sku = resultBufferOne[0].toNumber()
            //pn = resultBufferOne[1].toNumber()
            //console.log('*******Buffer One');
            //console.log(resultBufferOne[0].toNumber());
            //resultBufferOne[1]= resultBufferOne[1].toNumber()
            const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(pn)
            //console.log('STATE >>>>>>>>>>>>>>>>')
            //console.log(resultBufferTwo[5].toNumber())
            //Remove Big Number
           // productID = resultBufferTwo[2].toNumber()
            //resultBufferTwo[2] = resultBufferTwo[2].toNumber()
            //productPrice = resultBufferTwo[4].toNumber()
            //resultBufferTwo[4] = resultBufferTwo[4].toNumber()
            // Verify the result set
            // How do we produce a key value pair for the name and value
            assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
            assert.equal(resultBufferOne[1].toNumber(), pn, 'Error: Invalid item PN')
            assert.equal(resultBufferOne[2].toString(), originFactoryID, 'Error: Missing or Invalid ownerID')
            assert.equal(resultBufferOne[3].toString(), originFactoryID, 'Error: Missing or Invalid originFactoryID')
            assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
            assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
            assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
            assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
            assert.equal(resultBufferTwo[5].toNumber(), 0, 'Error: Invalid item State')
            assert.equal(eventEmitted, true, 'Invalid event emitted')    
            console.log('****** State: Received Item********')
            console.log(resultBufferTwo[5].toNumber())    
            }) 

        //})    

    // 2nd Test
    it("Testing smart contract function buildWidget()", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Built()
        var event = supplyChain.Built()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Built by calling function buildWidget()
        console.log('Factory_ID')
        console.log(factoryID)
        await supplyChain.buildWidget(pn, {from: originFactoryID, gas: 1000000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(pn)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(pn)
        
        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1].toNumber(), pn, 'Error: Invalid item PN')
        assert.equal(resultBufferOne[2].toString(), originFactoryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3].toString(), originFactoryID, 'Error: Missing or Invalid originFactoryID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5].toNumber(), 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
        console.log('****** State: Build Widget********')
        console.log(resultBufferTwo[5].toNumber())
        
    })    

    // 3rd Test
    it("Testing smart contract function shipItem()", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(pn, {from: originFactoryID, gas: 1000000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(pn)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(pn)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1].toNumber(), pn, 'Error: Invalid item PN')
        assert.equal(resultBufferOne[2].toString(), originFactoryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3].toString(), originFactoryID, 'Error: Missing or Invalid originFactoryID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5].toNumber(), 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
        console.log('****** State: Shipped Item********')
        console.log(resultBufferTwo[5].toNumber())
        
    })    

    // 4th Test
    it("Testing smart contract function receiveItemWarehouse()", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event 
        var event = supplyChain.Widget_Received()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Widget_Received by calling function receiveItemWarehouse()
        await supplyChain.receiveItemWarehouse(pn,productPrice,{from: originFactoryID, gas: 1000000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(pn)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(pn)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1].toNumber(), pn, 'Error: Invalid item PN')
        assert.equal(resultBufferOne[2].toString(), originFactoryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3].toString(), originFactoryID, 'Error: Missing or Invalid originFactoryID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5].toNumber(), 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
        console.log('****** State: Received Item Warehouse********')
        console.log(resultBufferTwo[5].toNumber())
          
    })    

    // 5th Test
    it("Testing smart contract function purchaseItem() that allows a distributor to buy widget", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
 

        
        // Watch the emitted event Widget_Purchased()
        var event = supplyChain.Widget_Purchased()
        await event.watch((err, res) => {
            eventEmitted = true
        })
        

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.purchaseItem(pn,{from: originFactoryID,value: web3.toWei(1, 'ether')});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(pn)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(pn)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1].toNumber(), pn, 'Error: Invalid item PN')
        assert.equal(resultBufferOne[2].toString(), originFactoryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3].toString(), originFactoryID, 'Error: Missing or Invalid originFactoryID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5].toNumber(), 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
        console.log('****** State: Purchase Item ********')
        console.log(resultBufferTwo[5].toNumber())
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Shipped()
        var event = supplyChain.Widget_Shipped_to_Customer()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.shipItemCustomer(pn,{from: originFactoryID, gas: 1000000})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(pn)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(pn)

        // Verify the result set
        assert.equal(resultBufferOne[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1].toNumber(), pn, 'Error: Invalid item PN')
        assert.equal(resultBufferOne[2].toString(), originFactoryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3].toString(), originFactoryID, 'Error: Missing or Invalid originFactoryID')
        assert.equal(resultBufferOne[4], originFactoryName, 'Error: Missing or Invalid originFactoryName')
        assert.equal(resultBufferOne[5], originFactoryInformation, 'Error: Missing or Invalid originFactoryInformation')
        assert.equal(resultBufferOne[6], originFactoryLatitude, 'Error: Missing or Invalid originFactoryLatitude')
        assert.equal(resultBufferOne[7], originFactoryLongitude, 'Error: Missing or Invalid originFactoryLongitude')
        assert.equal(resultBufferTwo[5].toNumber(), 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
        console.log('****** State: Shipped ********')
        console.log(resultBufferTwo[5].toNumber())
              
    })    



});

